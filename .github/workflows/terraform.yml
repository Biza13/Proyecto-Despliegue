name: Terraform AWS Deployment

#evento para que se deployee cuando se hace el push
#on:
#  push:   #evento a hacer en este caso cuando hagamos un push
#    branches:   #en la rama main
#      - main

#Este evento es para que solo se deployee si se lo digo manualmente
on:
 workflow_dispatch:

  #esto es para elegir que job hacemos si deploy o destroy
  inputs:
      job: 
        description: 'Choose the job to run'
        required: true
        default: 'deploy'
        type: choice
        options:
          - deploy
          - destroy

jobs:
#job para desplegar
  despliegue:   #nombre del job
    if: ${{ github.event.inputs.job == 'deploy' }}  # Condici칩n para que solo se ejecute si se elige deploy
    runs-on: ubuntu-latest   #maquina virtual en la que lo vamos a lanzar

    steps:   #pasos
          #este paso copia lo que hay en la rama main en la maquina virtual de ubuntu (lo de arriba)
      - name: Checkout   #nombre del action
        uses: actions/checkout@v4  #en el apartado de la derecha buscar el nombre del anterior aprametro y ponerle el uso (copiar y pegar)
      
      - name: Configurar credenciales aws
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: "us-east-1"  # Cambia a la regi칩n de AWS que est치s usando
          
          #este paso es para instalar terraform en la maquina virtual
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        id: init
        run: terraform init  
       
      - name: Plan Terraform
        id: plan
        run: terraform plan -var 'public_key=${{ secrets.DEPLOYER_PUBLIC_KEY }}'

      - name: Terraform Apply
        env:
         #definido previamente otro secreto con la clave publica deployer-key.pub
         TF_VAR_deployer_public_key: ${{ secrets.DEPLOYER_PUBLIC_KEY }}
        run: terraform apply -auto-approve -var 'public_key=${{ secrets.DEPLOYER_PUBLIC_KEY }}'

      - name: Subir tfstate como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: tfstate
          path: terraform.tfstate

  #job para hacer el destroy
  terraform-destroy:
    if: ${{ github.event.inputs.job == 'destroy' }}  # Condici칩n para que solo se ejecute si se elige destroy
    runs-on: ubuntu-latest
    #needs: despliegue  #aqui le digo que no se puede ejecutar sin qu ese haya ejecutado el despliegue primero

    steps:
    - name: Checkout code
      uses: actions/checkout@v4  

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: "us-east-1"

    - name: Terraform Init
      run: terraform init  

    # Descarga el archivo terraform.tfstate del artefacto
    - name: Download Terraform state artifact
      uses: actions/download-artifact@v4
      with:
        #name: tfstate
        #directorio donde lo descargara
        path: ./

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
